<?php
/**
 * Theme functions and definitions.
 * This child theme was generated by YITH Proteo.
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 */

/*
 * If your child theme has more than one .css file (eg. ie.css, style.css, main.css) then
 * you will have to make sure to maintain all of the parent theme dependencies.
 *
 * Make sure you're using the correct handle for loading the parent theme's styles.
 * Failure to use the proper tag will result in a CSS file needlessly being loaded twice.
 * This will usually not affect the site appearance, but it's inefficient and extends your page's loading time.
 *
 * @link https://codex.wordpress.org/Child_Themes
 */
function yithproteo_child_enqueue_styles() {
    wp_enqueue_style( 'yith-proteo-style' , get_template_directory_uri() . '/style.css', array('select2') );
    wp_enqueue_style( 'yith-proteo-child-style',
        get_stylesheet_directory_uri() . '/style.css',
        array( 'yith-proteo-style' ),
        wp_get_theme()->get('Version')
    );
}

add_action(  'wp_enqueue_scripts', 'yithproteo_child_enqueue_styles' );

/**
 * Auto Complete all WooCommerce orders.
 */
add_action( 'woocommerce_thankyou', 'custom_woocommerce_auto_complete_order' );
function custom_woocommerce_auto_complete_order( $order_id ) { 
    if ( ! $order_id ) {
        return;
    }

   	/* if convert free trail to payment
   	 * 29-04-2021
   	*/

   	if( WC()->session->get('oldorder') ){

   		$order = wc_get_order(WC()->session->get('oldorder'));
   		$order->update_status( 'cancelled','convert to payment' );

   		/* now order set completed */
   		$order = wc_get_order( $order_id );
    	$order->update_status( 'completed' );

		WC()->session->__unset('oldorder');
   	}else{

   		$order = wc_get_order( $order_id );
    	$order->update_status( 'completed' );

   	}

}

/**
 * Can validate field by comparing value with other field.
 */
class WPDesk_FCF_Validation_Confirm_Field {
    /**
     * Field to compare with validated field.
     *
     * @var string
     */
    private $field_to_compare;
    /**
     * WPDesk_FCF_Validation_Confirm_Field constructor.
     *
     * @param string $field_to_compare .
     */
    public function __construct( $field_to_compare ) {
        $this->field_to_compare = $field_to_compare;
    }
    public function hooks() {
        add_filter( 'flexible_checkout_fields_custom_validation', array( $this, 'register_custom_validation' ) );
    }
    /**
     * Register custom validation.
     *
     * @param array $custom_validation .
     *
     * @return array
     */
    public function register_custom_validation( $custom_validation ) {
        $custom_validation[ 'field_confirmation_' . $this->field_to_compare ] = array(
            'label'    => sprintf( __( 'Compare with %1$s', 'wpdesk' ), $this->field_to_compare ),
            'callback' => array( $this, 'validate' )
        );
        return $custom_validation;
    }
    /**
     * Validate.
     *
     * @param string $field_label Field label.
     * @param string $value Field value.
     */
    public function validate( $field_label, $value ) {
        $field_to_compare_value = sanitize_text_field( $_POST[ $this->field_to_compare ] );
        $valid = $field_to_compare_value === $value;
        if ( ! $valid ) {
            wc_add_notice( sprintf( __( 'Invalid %1$s value.', 'wpdesk' ), '<strong>' . $field_label . '</strong>' ), 'error' );
        }
    }
}
$fcf_validation_confirm_field = new WPDesk_FCF_Validation_Confirm_Field( 'billing_email' );
$fcf_validation_confirm_field->hooks();

// Do NOT include the opening php tag

/**
 * Function to validate the URL
 *
 */
function wpdesk_fcf_validate_url( $field_label, $value ) {
    // if ( filter_var( $value, FILTER_VALIDATE_URL ) == false ) {
    //     wc_add_notice( sprintf( '%s is not a valid URL.', '<strong>' . $field_label . '</strong>' ), 'error' );
    // }
    $nonespace = trim($value);
    if( preg_match('/^[a-z0-9]+$/i',$nonespace) === 0 ){
        wc_add_notice( sprintf( '%s is not valid. Please enter only characters and number.', '<strong>' . $field_label . '</strong>'), 'error' );
    }
}

add_filter( 'flexible_checkout_fields_custom_validation', 'wpdesk_fcf_custom_validation_url' );
/**
 * Add custom URL validation
 *
 */
function wpdesk_fcf_custom_validation_url( $custom_validation ) {
    $custom_validation['url'] = array(
        'label'     => 'Character+number',
        'callback'  => 'wpdesk_fcf_validate_url'
    );

    return $custom_validation;
}

// Do NOT include the opening php tag

/**
 * Function to validate the charecter and number and min ,max
 *
 */
function wpdesk_fcf_validate_charandnum( $field_label, $value ) {
    $nonespace = trim($value);
    $inputs = preg_match('/^[a-z0-9]+$/i',$nonespace); //preg_match("/[^A-Za-z0-9'-'_']/",$nonespace);//preg_match('/^[a-z0-9]+$/i',$nonespace);
    $min_length = 3;
    $max_length = 30;
    $value_length = strlen( $value );

	/*
	*  code more set param sitename is have value
	* 20/04/21
    */
    //$a = htmlentities($value);
   // $plain=urlencode(html_entity_decode($value));
	//explode(" ", $value);
    //$utf8_encode = utf8_encode(html_entity_decode($value));
    $plain = html_entity_decode($value);
    $convert_sitename = substr($plain,-1);
    if( $convert_sitename == "'" )//'`'
    {
       // case convert to pay can use same sitename
       //  $ts =  "Pattern found in subject";
       // wc_add_notice( sprintf( 'The %s is already used by other people. Please try again.', '<strong>' . $issamesitename . '</strong>'), 'error' );
        $issamesitename = substr($value,0,-1);
        WC()->session->set( 'sitename', $issamesitename );
    }
    else
    {
        global $wpdb;

        if ( $value_length < $min_length || $value_length > $max_length ) {
            wc_add_notice( sprintf( '%s is not valid. The length must be between %s and %s characters and numbr.', '<strong>' . $field_label . '</strong>', $min_length, $max_length ), 'error' );
        }
        if( preg_match('/^[a-z0-9]+$/i',$nonespace) === 0 ){
            wc_add_notice( sprintf( '%s is not valid. Please enter only characters and number.', '<strong>' . $field_label . '</strong>'), 'error' );
        }
        $myrows = $wpdb->get_col( "SELECT * FROM {$wpdb->prefix}postmeta where meta_value = '".$value."' and meta_key ='_order_website'");
        if(!empty($myrows)){
            wc_add_notice( sprintf( 'The %s is already used by other people. Please try again.', '<strong>' . $value . '</strong>'), 'error' );
        }

        //check vourcher code 30/7/2021
        // $checkvoucher = $wpdb->get_col( "SELECT * FROM voucher where voucher_code='".$value."'");
        //  wc_add_notice( sprintf( 'The %s is already used by other people. Please try again.', '<strong>' . $value . '</strong>'), 'error' );
       // $ts =  "No pattern found in subject";
       // wc_add_notice( sprintf( 'The %s is already used by other people. Please try again.', '<strong>' . $ts . '</strong>'), 'error' );

    }
  
}

add_filter( 'flexible_checkout_fields_custom_validation', 'wpdesk_fcf_custom_validation_charandnum' ,20,2 );
/**
 * Add custom charecter and number validation
 *
 */
function wpdesk_fcf_custom_validation_charandnum( $custom_validation ) {
    $custom_validation['char'] = array(
        'label'     => 'sitename only',
        'callback'  => 'wpdesk_fcf_validate_charandnum'
    );

    return $custom_validation;
}


// Do NOT include the opening php tag

function wpdesk_fcf_validate_CheckThailang( $field_label, $value ) {
    $min_length = 3;
    $max_length = 30;
    // $value_length = strlen( $value );

    // if ( $value_length < $min_length || $value_length > $max_length ) {
    //     wc_add_notice( sprintf( '%s is not valid. The length must be between %s and %s characters.', '<strong>' . $field_label . '</strong>', $min_length, $max_length ), 'error' );
    // }
     if( preg_match('/^[a-zA-Z](.*)+$/i',$value) === 0 ){
         wc_add_notice( sprintf( '%s is not valid. Please enter characters and format company.', '<strong>' . $field_label . '</strong>'), 'error' );
     }

}

add_filter( 'flexible_checkout_fields_custom_validation', 'wpdesk_fcf_custom_validation_CheckThailang' );
/**
 * Add custom length validation
 *
 */
function wpdesk_fcf_custom_validation_CheckThailang( $custom_validation ) {
    $custom_validation['CheckThailang'] = array(
        'label'     => 'Check Format Company',
        'callback'  => 'wpdesk_fcf_validate_CheckThailang'
    );

    return $custom_validation;
}


if( function_exists( 'YITH_WC_Subscription' ) ){
    remove_action( 'init', array( YITH_WC_Subscription(), 'add_endpoint' ), 15 );
}

/**
 * Adds a new column to the "My Orders" table in the account.
 *
 * @param string[] $columns the columns in the orders table
 * @return string[] updated columns
 */
function th_wc_add_my_account_orders_column( $columns ) {

        $new_columns = array();

        foreach ( $columns as $key => $name ) {

            $new_columns[ $key ] = $name;

            // add ship-to after order status column
            if ( 'order-total' === $key ) {
                $new_columns['order-website'] = __( 'Web Site', 'textdomain' );
                //$new_columns['order-paynow'] = __( 'Paynow', 'payagain' );
            }

        }

        return $new_columns;
    }
    add_filter( 'woocommerce_my_account_my_orders_columns', 'th_wc_add_my_account_orders_column',10, 1  );

    /**
     * Adds data to the custom "new-data" column in "My Account > Orders".
     *
     * @param \WC_Order $order the order object for the row
	 * 19/04/21 => 23-04-21
     */
    function th_wc_my_orders_new_data_column( $order ) {
        global $wpdb;

        $values = $order->get_meta( '_order_website' ); // Get custom order meta 
        //new column 
        $formatted_convert = wc_get_order( $order->get_id() );

		$setformatedate = date("Y-m-d H:i:s", strtotime($formatted_convert->date_paid));
		$list = explode(" ", $setformatedate);
		$date = str_replace('-', '/', $list[0]);
		$dateexprice = date('Y-m-d',strtotime($date . "+10 days"));
		if(date("Y-m-d") >= $dateexprice ){
			$status = 'exprice';
		}
		//var_dump($status);exit;
        //
		$items = $formatted_convert->get_items();
		foreach ( $items as $item ) {
			$product = wc_get_product($item->get_product_id());
    		$item_sku[] = $product->get_sku();
 		    $product_name = $item['name'];
		    $product_id = $item['product_id'];
		    $product_variation_id = $item['variation_id'];
		}
        //math product free -> to not free
        $changepay = str_replace("free", "plan", $item_sku);
        $newpackage = $changepay[0].'-5';
        $changeproid = wc_get_product_id_by_sku( $newpackage );

        $newagent = wc_get_product($changeproid);
        $newprice = $newagent->price;
        //set price
  	    //global $woocommerce; 
		// $woocommerce->cart->add_to_cart($newprice);
       //var_dump($changepay[0]);exit;
       // var_dump($order->get_id());exit;

        if ( !empty($values) ) {
        	$value .= "<a href='https://".$values.".itsmnetka.com' target='_blank'> https://".$values.".itsmnetka.com</a>";
    	}

    	if( empty($status) && $formatted_convert->status == 'completed' && $formatted_convert->total == '0.00' )
    	{ 

    		//$value .= "<br><a href='http://localhost:8000/itsmstore4/checkout/?add-to-cart=".$changeproid."&sitename=".$values."' class='woocommerce-button button view'>Pay</a>";

    		$value .= "<br><br><a href='http://localhost:8000/itsmstore4/product-category/subscription/?sitename=".$values."&order=".$order->get_id()."' class='woocommerce-button button view'>Pay</a>";
    		
    	}
    	echo $value;

    }
    add_action( 'woocommerce_my_account_my_orders_column_order-website', 'th_wc_my_orders_new_data_column' ); 

    /*
	 *	insert new params to sitename 
	 *	case convert free trial to payment  
	 *	can use sitename again
	 *  @params input set input value only
	 *	20/04/21
	 // add param to sitename auto -> case covert to pay same sitename again
    */
	
	add_filter( 'woocommerce_checkout_get_value' , 'custom_checkout_get_value', 20, 2 );
	function custom_checkout_get_value( $value, $imput ) {
	    // order_website
	    if(isset($_GET['sitename']) && ! empty($_GET['sitename']) && $imput == 'order_website' )
	       //$value = esc_attr( $_GET['sitename'].'-sameone'  );
	    	$value = esc_attr( $_GET['sitename']."'" );
            // $value = esc_attr( $_GET['sitename']."`" );
	    return $value;
	}
    
    /*
    * set attibute sitename readonly // set attibute sitename readonly
	*	20/04/21
    */
	
	add_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );

	// Our hooked in function - $fields is passed via the filter!
	function custom_override_checkout_fields( $fields ) {

		if ( isset($_GET['sitename']) && ! empty($_GET['sitename']) ) {
	     	$fields['order']['order_website']['custom_attributes'] = ['readonly'=>'readonly'];
	     	
	    }

	     return $fields;
	}
	
    /**
     * Adds a 1 item to the "checkout" only.
     *
     * 
     * 
     */
 
    function woo_custom_add_to_cart( $cart_item_data ) {
    global $woocommerce;
    $woocommerce->cart->empty_cart();
     
    return $cart_item_data;
    }
    add_filter( 'woocommerce_add_cart_item_data', 'woo_custom_add_to_cart' );


/**
 * @snippet       Redirect to Checkout Upon Add to Cart - WooCommerce
 * @how-to        Get CustomizeWoo.com FREE
 * @author        Rodolfo Melogli
 * @compatible    Woo 3.8
 * @donate $9     https://businessbloomer.com/bloomer-armada/
 *  20/04/21 change code
 */
  
add_filter( 'woocommerce_add_to_cart_redirect', 'bbloomer_redirect_checkout_add_cart' );
 
function bbloomer_redirect_checkout_add_cart() {
	//check can pay free trial แค่ 1 เท่านั้น 27-04-2021
	global $wpdb;

	
	//find order
	foreach (WC()->cart->get_cart() as $value) {
		$sku = $value['data']->sku;
		$find_free  = explode("-", $sku);
	}
	//check order have free trial ถ้ามีแล้วก็
	if(  $find_free[0] == 'free' ){
		$myrows = $wpdb->get_col( "SELECT * FROM {$wpdb->prefix}postmeta a inner join {$wpdb->prefix}woocommerce_order_items b on(a.post_id=b.order_id) where a.meta_key='_customer_user' and a.meta_value='".get_current_user_id()."' and b.order_item_name like '%Free%'" );
	}
	//var_dump($myrows,$find_free[0]);
	//exit;

	/*$customer_orders = get_posts( array(
    'numberposts' => -1,
    'meta_key'    => '_customer_user',
    'meta_value'  => get_current_user_id(),
    'post_type'   => wc_get_order_types(),
    'post_status' => array_keys( wc_get_order_statuses() ),
) );*/
	//var_dump($myrows);exit;
	if( !empty($myrows) ){
		$me = "have free trial already.";
		 wc_add_notice( sprintf( 'You have been registered free trial already, at this time you have to purchase for continue using our product'), 'error' );
		 
		 $newlinkredirect = wc_get_cart_url();//home_url();
		
		foreach (WC()->cart->get_cart() as $cart_item_key => $cart_item) {
			$te = $value['data']->sku;
			WC()->cart->remove_cart_item( $cart_item_key );
		}

		 return $newlinkredirect;
		
	}else{
		

		if(isset($_GET['sitename']) && ! empty($_GET['sitename']) ){
		//if( WC()->session->get('sitename') !== '' && !empty( WC()->session->get('sitename') ) ){
			//before edit 28-04-21
			//$newlinkredirect = wc_get_checkout_url().'?sitename='.$_GET['sitename'];
			//edit newcode 28-04-2021
			$newlinkredirect = wc_get_checkout_url().'?sitename='.$_GET['sitename'].'&order='.$_GET['order'];
			//$newlinkredirect = wc_get_checkout_url().'?sitename='. WC()->session->get('sitename');
		}else{
			WC()->session->__unset( 'sitename' );
			// edit newcode 28-04-2021
			WC()->session->__unset('oldorder');
			$newlinkredirect = wc_get_checkout_url();
		}

		 return $newlinkredirect;
	}
	  
}

/* change text thank you */
add_filter('woocommerce_thankyou_order_received_text', 'woo_change_order_received_text', 10, 2 );
function woo_change_order_received_text( $str, $order ) {
    $new_str = '<font size="4" color="#ff0000"><b>Thank you for your order, now your service desk is ready. Please kindly check your registered e-mail for the details.</b></font>';
    return $new_str;
}

//26-03-21
/* remove order again button in my account=>order */
remove_action( 'woocommerce_order_details_after_order_table', 'woocommerce_order_again_button' );



/*  check login or register checkout page 

//if not login or register redirect to my-account page  

*/

 add_action('template_redirect','check_if_logged_in');
    function check_if_logged_in()
    {
        $pageid = get_option( 'woocommerce_checkout_page_id' );
        if(!is_user_logged_in() && is_page($pageid))
        {
            $url = add_query_arg(
                'redirect_to',
                get_permalink($pagid),
                site_url('/my-account/') // your my acount url
            );
            wp_redirect($url);
            exit;
        }
        if(is_user_logged_in())
        {
        if(is_page(get_option( 'woocommerce_myaccount_page_id' )))
        {
            
            $redirect = $_GET['redirect_to'];
            if (isset($redirect)) {
            echo '<script>window.location.href = "'.$redirect.'";</script>';
            }
    
        }
        }
    }

/*  redirect cart page case empty to  home page  */
    add_filter( 'woocommerce_return_to_shop_redirect', 'custom_empty_cart_redirect_url' );

    function custom_empty_cart_redirect_url(){

        return home_url();

    }


/*  redirect after register */
// After registration, logout the user and redirect to home page
// function custom_registration_redirect() {
//     wp_logout();
//     return home_url('/');
// }
// add_action('woocommerce_registration_redirect', 'custom_registration_redirect', 2);

/* unset Required */
	add_filter( 'woocommerce_default_address_fields' , 'misha_disable_address_fields_validation' );
	 
	function misha_disable_address_fields_validation( $address_fields_array ) {
	 
	    unset( $address_fields_array['billing_address_1']['validate']);
	    unset( $address_fields_array['billing_city']['validate']);
	    // you can also hook first_name and last_name, company, country, city, address_1 and address_2
	 
	    return $address_fields_array;
	 
	}

/*
 * Change Text Select Option => Choose Plan, Read More => Your have already
*/
	add_filter( 'woocommerce_product_add_to_cart_text', function( $text ) {
	 global $product;
	 if ( $product->is_type( 'variable' ) ) {
	  $text = $product->is_purchasable() ? __( 'Choose Plan', 'woocommerce' ) : __( 'Your have already', 'woocommerce' );
	 }
	 return $text;
	}, 10 );

/**
* @snippet       Change Product add to cart Permalinks @ WooCommerce Shop
* @how-to        Get CustomizeWoo.com FREE
* @author        Rodolfo Melogli
* @compatible    WooCommerce 4.0
* @donate $9     https://businessbloomer.com/bloomer-armada/
* 23/04/21 change case free trail  can change plan and agent but sitename sameone
*/
add_filter( 'woocommerce_get_cart_url', 'filter_get_cart_url' );
function filter_get_cart_url( $url ) {
    // Only on single product pages
    if( is_product() )
        $url = wc_get_checkout_url();
    return $url;
}
 

function append_sku_string( $link, $post ) {

$post_meta = get_post_meta( $post->ID, '_sku', true );

    if ( 'product' == get_post_type( $post ) ) {

		if(isset($_GET['sitename']) && !empty($_GET['sitename']) ){

			 $link = $link . '?sitename='.$_GET['sitename'].'&order='.$_GET['order']; //'#' .$post_meta.
			 WC()->session->set('sitename', $_GET['sitename']);
			 if( !empty($_GET['order']) ){
			 	WC()->session->set('oldorder', $_GET['order']);
			 }
			 

		}else{

			if( !isset($_GET['sitename']) && !empty($_GET['sitename']) ){ 
				WC()->session->__unset( 'sitename' );
				WC()->session->__unset('oldorder');
			}

			$link = $link;
		}
      
//var_dump( $link );
       return $link;

    }

}

add_filter( 'post_type_link', 'append_sku_string', 1, 2 );

/*

 * Change Title Pdf Invoice

*/

if ( ! function_exists( 'yith_ywpi_proforma_document_title_custom' ) ) {
 function yith_ywpi_proforma_document_title_custom( $title ) {

 $title = esc_html__( 'Invoice','yith-woocommerce-pdf-invoice' );

      return $title;

 }

  /*

 * Change text on button doload pdf

*/
   add_filter( 'yith_ywpi_proforma_document_title', 'yith_ywpi_proforma_document_title_custom' );
}

if ( ! function_exists( 'yith_ywpi_pro_forma_button_text_my_account_custom' ) ) {
 function yith_ywpi_pro_forma_button_text_my_account_custom( $title ) {

 $title = esc_html__( 'Invoice','yith-woocommerce-pdf-invoice' );

      return $title;

 }
   add_filter( 'yith_ywpi_pro_forma_button_text_my_account', 'yith_ywpi_pro_forma_button_text_my_account_custom' );
}

/*

 * add expire date and nexbill to pdf invoice

*/
if( ! function_exists( 'yith_ywpi_after_document_notes_custom' ) ){
 function yith_ywpi_after_document_notes_custom( $document ){

 $order = wc_get_order($document->order);
 $subscription = ywsbs_get_subscription_by_order($order);
 
      if ( is_object( $subscription ) ){
 echo '<br><span>'. 'Next billing: ' . date_i18n( wc_date_format(), $subscription->get_payment_due_date() ) .'</span>';
         echo '<br><span>'. 'Expiring on: ' . date_i18n( wc_date_format(), $subscription->get_expired_date() ) .'</span>';
 }
   }
   add_action( 'yith_ywpi_after_document_notes', 'yith_ywpi_after_document_notes_custom', 10, 1 );
}


 /*

 * change text lost password

*/

function change_lost_your_password ($text) {
if ($text == 'Lost your password?'){
    $text = 'Forgot your password?';
 }
    return $text;
 }
add_filter( 'gettext', 'change_lost_your_password' );


 /*

 * change text on edit adress

*/
if( !function_exists('yith_my_custom_my_address_description') ) {
   add_filter( 'woocommerce_my_account_my_address_description', 'yith_my_custom_my_address_description', 10, 1 );
 function yith_my_custom_my_address_description( $text ) {

 $text = "The following billing address below, will be use for invoice tax payment";

 return $text;
 }
}

/* setting auto update plugin */
add_filter( 'auto_update_plugin', '__return_false' );

/* setting auto update plugin */
add_filter( 'auto_update_theme', '__return_false' );


//custom discount type coupon freetrial add 30 day 3/8/21
//add new coupon type called "custom_discount"
function custom_discount_type( $discount_types ) {
    $discount_types['custom_fixedfree'] =__( 'Fixed freetrial 30 days', 'woocommerce' );
     // var_dump($discount_types);exit;
    return $discount_types;
    }

// add the hooks
add_filter( 'woocommerce_coupon_discount_types', 'custom_discount_type',10, 1);

//function to get coupon amount for "custom_discount"
function woocommerce_coupon_get_discount_amount($discount, $discounting_amount, $cart_item, $single, $coupon) {
        if ($coupon->type == 'custom_fixedfree'){ // set day freetrial 30 day
            $discount = "free 30 days";
            return $discount;
            // array_pu
            } else {
             return $discount;
            }
        }
//add hook to coupon amount hook
add_filter('woocommerce_coupon_get_discount_amount', 'woocommerce_coupon_get_discount_amount', 10, 5);


// add  hook to order status complete call api forfree and use coupon or notuse coupon  
add_action( 'woocommerce_order_status_completed', 'update_frm_entry_after_wc_order_completed' );
function update_frm_entry_after_wc_order_completed( $order_id ) {
    $order = new WC_Order( $order_id );
    global $wpdb;

    //check for free only
    $findisfree = $wpdb->get_col("SELECT meta_value FROM {$wpdb->prefix}postmeta where meta_key='_order_total' and post_id=$order_id");
    if($findisfree[0]=="0.00"){

        $trimname = $wpdb->get_col("SELECT meta_value FROM  {$wpdb->prefix}postmeta where meta_key='_order_website' order by meta_id desc limit 1");
        //check sitename no space
        $isusername = preg_replace('/[ ]+/', '', trim($trimname[0]));

        

        //find region and country
        $findregion = $wpdb->get_results("SELECT meta_key,meta_value FROM  {$wpdb->prefix}postmeta where post_id=$order_id and meta_key in ('_billing_state','_billing_country') order by meta_key asc ");
        foreach ($findregion as $value) {
            $isfind[] = $value->meta_value;
        }

        //check have coupon?
        $countcoupong = $wpdb->get_col("SELECT order_item_name FROM {$wpdb->prefix}woocommerce_order_items where order_id=$order_id and order_item_type='coupon'");
        if( !empty($countcoupong[0]) ){
            $isper = "30 days";
        }else{
            $isper = "10 days";
        }

        //find product sku  
        $find_SKU = $wpdb->get_col("SELECT b.meta_value FROM {$wpdb->prefix}woocommerce_order_items a inner join {$wpdb->prefix}woocommerce_order_itemmeta b on(a.order_item_id=b.order_item_id) where a.order_item_type='line_item' and a.order_id=$order_id and b.meta_key='_ywpi_product_sku'");
        
        $productname = preg_split('/(-|_|,| )/', $find_SKU[0]);
        $plan = strtoupper($productname[1]);
        $agent = "5";
        $valuetype = "DEMO";

        $setparam = 'username='.$isusername.'&agent='.$agent.'&package='.$plan.'&type='.$valuetype.'&email='.wp_get_current_user()->user_email.'&region='.$isfind[0].'&country='.$isfind[1].'&isper='.$isper;


    //exit();
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => 'http://localhost:8000/newpayment1/public/api/chargeforfree',//'http://localhost:8000/newpayment1/public/api/chargeforfree',//'http://provisioning.itsmnetka.com/api/chargeforfree',
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => '',
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 0,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => 'POST',
              CURLOPT_POSTFIELDS => $setparam,
              CURLOPT_HTTPHEADER => array(
                'Content-Type: application/x-www-form-urlencoded'
              ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
    }
    
}

/*  ========== 10-08-21 add new status for recurring reject  ============== */

// Add to list of WC Order statuses
function add_awaiting_shipment_to_order_statuses( $order_statuses ) {
 
    $new_order_statuses = array();
 
    // add new order status after processing
    foreach ( $order_statuses as $key => $status ) {
 
        $new_order_statuses[ $key ] = $status;
 
        if ( 'wc-failed' === $key ) {
            $new_order_statuses['wc-reject-card-expirce'] = 'Reject Card Expirce';
        }
    }
 
    return $new_order_statuses;
}
add_filter( 'wc_order_statuses', 'add_awaiting_shipment_to_order_statuses' );


// //add re-pay button for case reject recurring card limit or card expirce
// function addRepayButton($subscription) {
//     $actions = wcs_get_all_user_actions_for_subscription( $subscription, get_current_user_id() );
//     if(!empty($actions)){
//         foreach ( $actions as $key => $action ){
//             if(strtolower($action['name']) == "Re-Pay"){
//                 $repayLink = esc_url( $action['url'] );
//                 echo "<a href='$repayLink' class='button cancel'>".$action['name']."</a>";
//             }
//         }
//     }
// }
// add_action( 'woocommerce_my_subscriptions_actions', 'addRepayButton', 10 );

/* debug action all*/
// print_r($GLOBALS['wp_filter']);
//add_action('wp', function(){ echo '<pre>';print_r($GLOBALS['wp_filter']); echo '</pre>';exit; } );
?>